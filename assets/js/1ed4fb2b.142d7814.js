"use strict";(self.webpackChunkphynix_docs=self.webpackChunkphynix_docs||[]).push([[1681],{3905:(e,n,r)=>{r.d(n,{Zo:()=>m,kt:()=>g});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},m=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=l(r),p=a,g=d["".concat(s,".").concat(p)]||d[p]||u[p]||o;return r?t.createElement(g,c(c({ref:n},m),{},{components:r})):t.createElement(g,c({ref:n},m))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=r[l];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7392:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=r(7462),a=(r(7294),r(3905));const o={},c="Events",i={unversionedId:"core/commands/events",id:"core/commands/events",title:"Events",description:"Server-side",source:"@site/docs/core/commands/events.md",sourceDirName:"core/commands",slug:"/core/commands/events",permalink:"/docs/core/commands/events",draft:!1,editUrl:"https://github.com/distritic/phynix-docs/tree/main/docs/core/commands/events.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Exports",permalink:"/docs/core/users/exports"},next:{title:"Exports",permalink:"/docs/core/commands/exports"}},s={},l=[{value:"Server-side",id:"server-side",level:2},{value:"core:addCommand",id:"coreaddcommand",level:3},{value:"core:addJobCommand",id:"coreaddjobcommand",level:3},{value:"core:addGroupCommand",id:"coreaddgroupcommand",level:3},{value:"core:addWhitelistCommand",id:"coreaddwhitelistcommand",level:3},{value:"core:addRconCommand",id:"coreaddrconcommand",level:3}],m={toc:l},d="wrapper";function u(e){let{components:n,...r}=e;return(0,a.kt)(d,(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"events"},"Events"),(0,a.kt)("h2",{id:"server-side"},"Server-side"),(0,a.kt)("h3",{id:"coreaddcommand"},"core:addCommand"),(0,a.kt)("p",null,"Register a new command which can be used by everyone."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},'TriggerEvent("core:addCommand", name --[[string]], routine --[[function]], suggestion --[[table]], devUse --[[bool]]);\n-- name: the command name\n-- routine(src, args, user, char, plyPos): the callback function triggered when the command is called\n-- suggestion: the chat suggestion for this command\n-- devUse?: whether the "dev" group can use this command\n\n-- src: the player ID triggering command\n-- args: command argument array\n-- user: the user object of the player\n-- char: the character object of the player\n-- plyPos: the position of the player\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"routine")," callback function will parse the arguments as seen below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},'TriggerEvent("core:addCommand", "ping", function(src, args, user, char, plyPos),\n  TriggerClientEvent("core:notify", src, "Pong!");\nend, {\n  help = "Pong!"\n});\n')),(0,a.kt)("h3",{id:"coreaddjobcommand"},"core:addJobCommand"),(0,a.kt)("p",null,"Register a new command which can be used by players with a specific job."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"job")," parameter may be a table array of jobs (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "police", "ems" }'),") or a string value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},'TriggerEvent("core:addJobCommand", name --[[string]], job --[[string/table]], routine --[[function]], suggestion --[[table]], devUse --[[bool]]);\n-- name: the command name\n-- job: the job name or array of jobs allowed\n-- routine(src, args, user, char, plyPos): the callback function triggered when the command is called\n-- suggestion: the chat suggestion for this command\n-- devUse?: whether the "dev" group can use this command\n\n-- src: the player ID triggering command\n-- args: command argument array\n-- user: the user object of the player\n-- char: the character object of the player\n-- plyPos: the position of the player\n')),(0,a.kt)("h3",{id:"coreaddgroupcommand"},"core:addGroupCommand"),(0,a.kt)("p",null,"Register a new command which can be used by players with a specific group, or inherited groups."),(0,a.kt)("p",null,"For example, using default configuration - an ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," will be able to use ",(0,a.kt)("inlineCode",{parentName:"p"},"mod")," commands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},'TriggerEvent("core:addGroupCommand", name --[[string]], group --[[string]], routine --[[function]], suggestion --[[table]], devUse --[[bool]]);\n-- name: the command name\n-- group: the minimum group required to use the command\n-- routine(src, args, user, char, plyPos): the callback function triggered when the command is called\n-- suggestion: the chat suggestion for this command\n-- devUse?: whether the "dev" group can use this command\n\n-- src: the player ID triggering command\n-- args: command argument array\n-- user: the user object of the player\n-- char: the character object of the player\n-- plyPos: the position of the player\n')),(0,a.kt)("h3",{id:"coreaddwhitelistcommand"},"core:addWhitelistCommand"),(0,a.kt)("p",null,"Register a new command which can be used by players with a specific whitelist."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"whitelist")," parameter may be a table array of whitelists (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},'{ "police", "ems" }'),") or a string value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},'TriggerEvent("core:addWhitelistCommand", name --[[string]], whitelist --[[string/table]], routine --[[function]], suggestion --[[table]], devUse --[[bool]]);\n-- name: the command name\n-- job: the job name or array of jobs allowed\n-- routine(src, args, user, char, plyPos): the callback function triggered when the command is called\n-- suggestion: the chat suggestion for this command\n-- devUse?: whether the "dev" group can use this command\n\n-- src: the player ID triggering command\n-- args: command argument array\n-- user: the user object of the player\n-- char: the character object of the player\n-- plyPos: the position of the player\n')),(0,a.kt)("h3",{id:"coreaddrconcommand"},"core:addRconCommand"),(0,a.kt)("p",null,"Register a new command which can be used from the server console."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},'TriggerEvent("core:addRconCommand", name --[[string]], routine --[[function]]);\n-- name: the command name\n-- routine(src, args): the callback function triggered when the command is called\n\n-- src: the player ID triggering command (always 0)\n-- args: command argument array\n')))}u.isMDXComponent=!0}}]);