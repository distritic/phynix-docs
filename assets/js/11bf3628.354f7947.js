"use strict";(self.webpackChunkphynix_docs=self.webpackChunkphynix_docs||[]).push([[487],{3905:(e,t,l)=>{l.d(t,{Zo:()=>p,kt:()=>v});var r=l(7294);function n(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function i(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,r)}return l}function a(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?i(Object(l),!0).forEach((function(t){n(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):i(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function o(e,t){if(null==e)return{};var l,r,n=function(e,t){if(null==e)return{};var l,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)l=i[r],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)l=i[r],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var c=r.createContext({}),s=function(e){var t=r.useContext(c),l=t;return e&&(l="function"==typeof e?e(t):a(a({},t),e)),l},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var l=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(l),h=n,v=d["".concat(c,".").concat(h)]||d[h]||u[h]||i;return l?r.createElement(v,a(a({ref:t},p),{},{components:l})):r.createElement(v,a({ref:t},p))}));function v(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=l.length,a=new Array(i);a[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:n,a[1]=o;for(var s=2;s<i;s++)a[s]=l[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,l)}h.displayName="MDXCreateElement"},3596:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=l(7462),n=(l(7294),l(3905));const i={},a="Exports",o={unversionedId:"vehicles/exports",id:"vehicles/exports",title:"Exports",description:"Client-side",source:"@site/docs/vehicles/exports.md",sourceDirName:"vehicles",slug:"/vehicles/exports",permalink:"/docs/vehicles/exports",draft:!1,editUrl:"https://github.com/distritic/phynix-docs/tree/main/docs/vehicles/exports.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Events",permalink:"/docs/vehicles/events"},next:{title:"Generic Commands",permalink:"/docs/resources/commands/generic"}},c={},s=[{value:"Client-side",id:"client-side",level:2},{value:"TryTrunk",id:"trytrunk",level:3},{value:"IsVehiclePlayerOwned",id:"isvehicleplayerowned",level:3},{value:"SetVehiclePlayerOwned",id:"setvehicleplayerowned",level:3},{value:"DegradeOwnedVehicle",id:"degradeownedvehicle",level:3},{value:"ControlVehicleDoor",id:"controlvehicledoor",level:3},{value:"HasKeys",id:"haskeys",level:3},{value:"SetFuelLevel",id:"setfuellevel",level:3},{value:"Server-side",id:"server-side",level:2},{value:"GetVehicleDegradationByPlate",id:"getvehicledegradationbyplate",level:3},{value:"SetVehicleDegradationByPlate",id:"setvehicledegradationbyplate",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...l}=e;return(0,n.kt)(d,(0,r.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"exports"},"Exports"),(0,n.kt)("h2",{id:"client-side"},"Client-side"),(0,n.kt)("h3",{id:"trytrunk"},"TryTrunk"),(0,n.kt)("p",null,"This export is used to open the trunk of a vehicle from behind. The player must be behind the vehicle."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},"exports.px_veh:TryTrunk(wait --[[bool]], notify --[[bool]]);\n-- wait: if true, will wait for player to walk to trunk\n-- notify: if true, will notify player of errors/requirements\n")),(0,n.kt)("h3",{id:"isvehicleplayerowned"},"IsVehiclePlayerOwned"),(0,n.kt)("p",null,"This export will return true if the vehicle has been marked as owned by a player."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},"local isOwned --[[bool]] = exports.px_veh:IsVehiclePlayerOwned(entity --[[int]]);\n-- entity: vehicle to check\n")),(0,n.kt)("h3",{id:"setvehicleplayerowned"},"SetVehiclePlayerOwned"),(0,n.kt)("p",null,"This export will set a vehicle as owned by a player. Can be returned using ",(0,n.kt)("inlineCode",{parentName:"p"},"IsVehiclePlayerOwned"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},"exports.px_veh:SetVehiclePlayerOwned(entity --[[int]], bool --[[bool]]);\n-- entity: vehicle to check\n-- bool: is player owned\n")),(0,n.kt)("h3",{id:"degradeownedvehicle"},"DegradeOwnedVehicle"),(0,n.kt)("p",null,"This export will degrade the player's current vehicle."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},"exports.px_veh:DegradeOwnedVehicle(upperLimit --[[int]], spin --[[int]]);\n-- upperLimit: math.random(0, upperLimit) for each part\n-- spin: number of iterations of potential degradation (50% chance for each iteration)\n")),(0,n.kt)("h3",{id:"controlvehicledoor"},"ControlVehicleDoor"),(0,n.kt)("p",null,"This export will control vehicle doors."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},'exports.px_veh:ControlVehicleDoor(type --[[string]], index --[[int]], veh --[[int]]);\n-- type: "open_door" or "close_door"\n-- index: door index (0 for driver, 1 for front passenger, etc.)\n-- veh: vehicle to control\n')),(0,n.kt)("h3",{id:"haskeys"},"HasKeys"),(0,n.kt)("p",null,"This export will return whether the player has keys to the given vehicle by plate."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},"local hasKeys --[[bool]] = exports.px_veh:HasKeys(plate --[[string]]);\n-- plate: vehicle plate to check for\n")),(0,n.kt)("h3",{id:"setfuellevel"},"SetFuelLevel"),(0,n.kt)("p",null,"This export will set vehicle fuel level."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},"exports.px_veh:SetFuelLevel(veh --[[int]], level --[[int]]);\n-- veh: vehicle to control\n-- level: new fuel level\n")),(0,n.kt)("h2",{id:"server-side"},"Server-side"),(0,n.kt)("h3",{id:"getvehicledegradationbyplate"},"GetVehicleDegradationByPlate"),(0,n.kt)("p",null,"This export will return current vehicle degradation by plate. ",(0,n.kt)("inlineCode",{parentName:"p"},"false")," will be returned if the degradation has not been cached."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local degradation --[[table]] = exports.px_veh:GetVehicleDegradationByPlate(plate --[[string]]);\n")),(0,n.kt)("h3",{id:"setvehicledegradationbyplate"},"SetVehicleDegradationByPlate"),(0,n.kt)("p",null,"This export will set current vehicle degradation by plate."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"exports.px_veh:SetVehicleDegradationByPlate(plate --[[string]], degradation --[[table]]);\n")))}u.isMDXComponent=!0}}]);