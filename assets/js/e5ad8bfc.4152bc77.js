"use strict";(self.webpackChunkphynix_docs=self.webpackChunkphynix_docs||[]).push([[3311],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(a),p=r,h=d["".concat(c,".").concat(p)]||d[p]||m[p]||i;return a?n.createElement(h,l(l({ref:t},u),{},{components:a})):n.createElement(h,l({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},2967:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:2},l="Methods",o={unversionedId:"banking/account/methods",id:"banking/account/methods",title:"Methods",description:"Generic Methods",source:"@site/docs/banking/account/methods.md",sourceDirName:"banking/account",slug:"/banking/account/methods",permalink:"/docs/banking/account/methods",draft:!1,editUrl:"https://github.com/distritic/phynix-docs/tree/main/docs/banking/account/methods.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Accessing the Object",permalink:"/docs/banking/account/get-object"},next:{title:"Attributes",permalink:"/docs/banking/account/attributes"}},c={},s=[{value:"Generic Methods",id:"generic-methods",level:2},{value:"get",id:"get",level:3},{value:"set",id:"set",level:3},{value:"canPay",id:"canpay",level:3},{value:"canAccess",id:"canaccess",level:3},{value:"addCharacter",id:"addcharacter",level:3},{value:"setCharacterPerm",id:"setcharacterperm",level:3},{value:"removeCharacter",id:"removecharacter",level:3},{value:"getDataForUI",id:"getdataforui",level:3},{value:"getSelf",id:"getself",level:3},{value:"Transaction Methods",id:"transaction-methods",level:2},{value:"Deposit",id:"deposit",level:3},{value:"Withdraw",id:"withdraw",level:3},{value:"Salary",id:"salary",level:3},{value:"Bill",id:"bill",level:3},{value:"LoanPayment",id:"loanpayment",level:3},{value:"Transfer",id:"transfer",level:3},{value:"Payment",id:"payment",level:3},{value:"PaymentVoid",id:"paymentvoid",level:3},{value:"Transaction",id:"transaction",level:3}],u={toc:s},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"methods"},"Methods"),(0,r.kt)("h2",{id:"generic-methods"},"Generic Methods"),(0,r.kt)("h3",{id:"get"},"get"),(0,r.kt)("p",null,"This function is used to return a field from the account object. The collection of fields which exist for an account are delared in the ",(0,r.kt)("a",{parentName:"p",href:"attributes"},"Attributes")," guide."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local value --[[any]] = account.get(key --[[string]]);\n-- key: the field to return\n")),(0,r.kt)("h3",{id:"set"},"set"),(0,r.kt)("p",null,"This function is used to set a field in the account object. The collection of fields which exist for an account are delared in the ",(0,r.kt)("a",{parentName:"p",href:"attributes"},"Attributes")," guide."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"account.set(key --[[string]], value --[[any]]);\n-- key: the field to be updated\n-- value: the new value assigned to the field\n")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"We do not recommend using this method to update dynamic table fields such as ",(0,r.kt)("inlineCode",{parentName:"p"},"logs"),", as in doing so you could corrupt or invalidate data.")),(0,r.kt)("h3",{id:"canpay"},"canPay"),(0,r.kt)("p",null,"This function will return whether the account can afford to pay the given amount. It will also return ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if the given account is frozen."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local canPay --[[bool]] = account.canPay(amount --[[int]]);\n")),(0,r.kt)("h3",{id:"canaccess"},"canAccess"),(0,r.kt)("p",null,"This function will return whether a character has access to a bank account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local canAccess --[[bool]] = account.canAccess(char --[[int/table]], useId --[[bool]]);\n-- char: character ID (if useId) or character object\n-- useId: whether the character ID is being used\n")),(0,r.kt)("h3",{id:"addcharacter"},"addCharacter"),(0,r.kt)("p",null,"This function will add a new character to a bank account. It is not possible to add another character to a ",(0,r.kt)("inlineCode",{parentName:"p"},"personal")," account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local success --[[bool]] = account.addCharacter(charId --[[int]], charName --[[string]], canWithdraw --[[bool]], canDeposit --[[bool]]);\n")),(0,r.kt)("h3",{id:"setcharacterperm"},"setCharacterPerm"),(0,r.kt)("p",null,"This function will set character permissions over the account. The ",(0,r.kt)("inlineCode",{parentName:"p"},"permission")," field may be ",(0,r.kt)("inlineCode",{parentName:"p"},'"widthdraw"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"deposit"'),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local success --[[bool]] = account.addCharacter(charId --[[int]], permission --[[string]], value --[[bool]]);\n")),(0,r.kt)("h3",{id:"removecharacter"},"removeCharacter"),(0,r.kt)("p",null,"This function will remove a character from a bank account. It is not possible to remove a character from a ",(0,r.kt)("inlineCode",{parentName:"p"},"personal")," account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local success --[[bool]] = account.removeCharacter(charId --[[int]]);\n")),(0,r.kt)("h3",{id:"getdataforui"},"getDataForUI"),(0,r.kt)("p",null,"This function will return account data used primarily for the banking UI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local data --[[table]] = account.getDataForUI();\n")),(0,r.kt)("h3",{id:"getself"},"getSelf"),(0,r.kt)("p",null,"This function will return the internal private account object. It is not recommended to ",(0,r.kt)("strong",{parentName:"p"},"ever")," use this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local self --[[table]] = account.getSelf();\n")),(0,r.kt)("h2",{id:"transaction-methods"},"Transaction Methods"),(0,r.kt)("h3",{id:"deposit"},"Deposit"),(0,r.kt)("p",null,"This function will deposit money to the bank account from the character's ",(0,r.kt)("inlineCode",{parentName:"p"},"money")," balance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local status --[[int]], reason --[[string]] = account.Deposit(char --[[table]], amount --[[int]], notes --[[string]], cb --[[function]]);\n")),(0,r.kt)("h3",{id:"withdraw"},"Withdraw"),(0,r.kt)("p",null,"This function will withdraw money from the bank account to the character's ",(0,r.kt)("inlineCode",{parentName:"p"},"money")," balance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local status --[[int]], reason --[[string]] = account.Withdraw(char --[[table]], amount --[[int]], notes --[[string]], cb --[[function]]);\n")),(0,r.kt)("h3",{id:"salary"},"Salary"),(0,r.kt)("p",null,"This function will create a new salary record for the account, and increase the balance by ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," specified."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local status --[[int]], reason --[[string]] = account.Salary(char --[[table]], amount --[[int]], notes --[[string]], cb --[[function]]);\n")),(0,r.kt)("h3",{id:"bill"},"Bill"),(0,r.kt)("p",null,"This function will create a new bill record for the account, and decrease the balance by ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," specified."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local status --[[int]], reason --[[string]] = account.Bill(char --[[table]], amount --[[int]], notes --[[string]], cb --[[function]]);\n")),(0,r.kt)("h3",{id:"loanpayment"},"LoanPayment"),(0,r.kt)("p",null,"This function will create a new loan payment record for the account, and decrease the balance by ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," specified."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local status --[[int]], reason --[[string]] = account.LoanPayment(char --[[table]], amount --[[int]], notes --[[string]], cb --[[function]]);\n")),(0,r.kt)("h3",{id:"transfer"},"Transfer"),(0,r.kt)("p",null,"This function will tranfer money from the account to a target account, decreasing and increasing each balance respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local status --[[int]], reason --[[string]] = account.Transfer(char --[[table]], amount --[[int]], notes --[[string]], accountId --[[int]], cb --[[function]]);\n")),(0,r.kt)("h3",{id:"payment"},"Payment"),(0,r.kt)("p",null,"This function will pay money from the account to a target account, decreasing and increasing each balance respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local status --[[int]], reason --[[string]] = account.Payment(char --[[table]], amount --[[int]], notes --[[string]], accountId --[[int]], notTaxed --[[bool]], cb --[[function]]);\n")),(0,r.kt)("h3",{id:"paymentvoid"},"PaymentVoid"),(0,r.kt)("p",null,"This function will pay money from the account to a void account, decreasing the balance by ",(0,r.kt)("inlineCode",{parentName:"p"},"amount")," specified."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local status --[[int]], reason --[[string]] = account.PaymentVoid(char --[[table]], amount --[[int]], notes --[[string]], cb --[[function]]);\n")),(0,r.kt)("h3",{id:"transaction"},"Transaction"),(0,r.kt)("p",null,"This function will register a generic transaction between the account and a target account, decreasing and icnreasing each balance respectively."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"You should avoid using this method and instead use one of the transaction methods above. It is provided as a generic, and ideally shouldn't exist outside the private scope of the account.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="server/main.lua"',title:'"server/main.lua"'},"local status --[[int]], reason --[[string]] = account.Transaction(char --[[table]], amount --[[int]], notes --[[string]], inflow --[[bool]], code --[[string]], accountId --[[int]], cb --[[function]]);\n")))}m.isMDXComponent=!0}}]);