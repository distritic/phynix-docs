"use strict";(self.webpackChunkphynix_docs=self.webpackChunkphynix_docs||[]).push([[8815],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=m(n),d=r,g=c["".concat(s,".").concat(d)]||c[d]||p[d]||l;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4504:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const l={},i="Exports",o={unversionedId:"hud/exports",id:"hud/exports",title:"Exports",description:"Client-side",source:"@site/docs/hud/exports.md",sourceDirName:"hud",slug:"/hud/exports",permalink:"/docs/hud/exports",draft:!1,editUrl:"https://github.com/distritic/phynix-docs/tree/main/docs/hud/exports.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Library",permalink:"/docs/utils/library"},next:{title:"Forms",permalink:"/docs/hud/forms"}},s={},m=[{value:"Client-side",id:"client-side",level:2},{value:"NewForm",id:"newform",level:3},{value:"NewFormAsync",id:"newformasync",level:3},{value:"StartGame",id:"startgame",level:3},{value:"GetZone",id:"getzone",level:3},{value:"HasVehicleUI",id:"hasvehicleui",level:3},{value:"AddTargetEntity",id:"addtargetentity",level:3},{value:"AddTargetBoxZone",id:"addtargetboxzone",level:3},{value:"DeleteTargetByName",id:"deletetargetbyname",level:3},{value:"ToggleTarget",id:"toggletarget",level:3},{value:"DoesTargetExist",id:"doestargetexist",level:3}],u={toc:m},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"exports"},"Exports"),(0,r.kt)("h2",{id:"client-side"},"Client-side"),(0,r.kt)("h3",{id:"newform"},"NewForm"),(0,r.kt)("p",null,"Create a new synchronous form. See ",(0,r.kt)("a",{parentName:"p",href:"forms"},"Forms")," for more information on how to setup a form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},'local result --[[table]] = exports.px_hud:NewForm({\n  ["title"] = title --[[string]],\n  ["elements"] = elements --[[table]],\n  ["canExit"] = canExit --[[bool]],\n  ["validate"] = validate --[[function]]\n})\n\n-- title: form title\n-- elements: form elements\n-- canExit: allow the player to exit the form (ESC or \'Cancel\' button)\n-- validate(fields): called when the user wants to submit the form. \n--                   Must return {success = true} to allow submission.\n-- result: a table of key-value pairs in the form [field] = value\n')),(0,r.kt)("h3",{id:"newformasync"},"NewFormAsync"),(0,r.kt)("p",null,"Create a new asynchronous form. See ",(0,r.kt)("a",{parentName:"p",href:"forms"},"Forms")," for more information on how to setup a form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},'local result --[[table]] = exports.px_hud:NewFormAsync({\n  ["title"] = title --[[string]],\n  ["elements"] = elements --[[table]],\n  ["canExit"] = canExit --[[bool]],\n  ["validate"] = validate --[[function]],\n  ["onFinish"] = onFinish --[[function]]\n})\n\n-- title: form title\n-- elements: form elements\n-- canExit: allow the player to exit the form (ESC or \'Cancel\' button)\n-- validate(fields): called when the user wants to submit the form. \n--                   Must return {success = true} to allow submission.\n-- onFinish(success, fields): called when the form has submitted\n')),(0,r.kt)("h3",{id:"startgame"},"StartGame"),(0,r.kt)("p",null,"Start a new HUD minigame. Currently, only ",(0,r.kt)("inlineCode",{parentName:"p"},'"circle"')," is supported for the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," parameter. See ",(0,r.kt)("a",{parentName:"p",href:"games"},"Games")," for more information on how to setup a game."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},'local result --[[bool]] = exports.px_hud:StartGame(name --[[string]], params --[[table]], callback --[[function]], sync --[[bool]]);\n-- name: minigame name, currently only "circle" is supported\n-- params: minigame parameters, depends on game type\n-- callback(success): if not sync, a callback with success value\n-- sync: blocking, will return result from function rather than callback\n')),(0,r.kt)("h3",{id:"getzone"},"GetZone"),(0,r.kt)("p",null,"Get the zone name based on player position."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},"local zone --[[string]] = exports.px_hud:GetZone(coords --[[vector3]]);\n-- coords: position to get zone from\n-- zone: current zone based on coords parameter\n")),(0,r.kt)("h3",{id:"hasvehicleui"},"HasVehicleUI"),(0,r.kt)("p",null,"Returns whether the player currently has a vehicle UI visible."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},"local visible --[[bool]] = exports.px_hud:HasVehicleUI();\n-- visible: true if vehicle UI is visible\n")),(0,r.kt)("h3",{id:"addtargetentity"},"AddTargetEntity"),(0,r.kt)("p",null,"Add an entity as a new interaction target. Allows the player to interact with the entity using the ",(0,r.kt)("inlineCode",{parentName:"p"},"LALT")," targetting system. See ",(0,r.kt)("a",{parentName:"p",href:"target"},"Target")," for more information on how to setup a target."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},'exports.px_hud:AddTargetEntity({\n  ["name"] = name --[[string]],\n  ["label"] = label --[[string]],\n  ["icon"] = icon --[[string]],\n  ["job"] = job --[[string]],\n  ["minDistance"] = minDistance --[[float]],\n  ["compute"] = compute --[[function]],\n  ["handler"] = handler --[[function]]\n});\n-- name: name of target zone, must be unique\n-- label: target zone label\n-- icon: target zone icon, must be FontAwesome format\n-- job?: job required to interact with target (nil for none)\n-- minDistance: minimum distance from player to entity for interaction\n-- compute(entityHit, entityModel): return true if player is allowed to interact\n-- handler(plyPed, plyCoords, entityHit): handler for when interaction occurs\n')),(0,r.kt)("h3",{id:"addtargetboxzone"},"AddTargetBoxZone"),(0,r.kt)("p",null,"Add a box zone as a new interaction target. Allows the player to interact with the environment using the ",(0,r.kt)("inlineCode",{parentName:"p"},"LALT")," targetting system. See ",(0,r.kt)("a",{parentName:"p",href:"target"},"Target")," for more information on how to setup a target."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},'exports.px_hud:AddTargetBoxZone({\n  ["name"] = name --[[string]],\n  ["label"] = label --[[string]],\n  ["icon"] = icon --[[string]],\n  ["job"] = job --[[string]],\n  ["minDistance"] = minDistance --[[float]],\n  ["handler"] = handler --[[function]],\n}, boxZone --[[table]]);\n-- name: name of target zone, must be unique\n-- label: target zone label\n-- icon: target zone icon, must be FontAwesome format\n-- job?: job required to interact with target (nil for none)\n-- minDistance: minimum distance from player to entity for interaction\n-- handler(plyPed, plyCoords, entityHit): handler for when interaction occurs\n-- boxZone: the box zone parameters\n')),(0,r.kt)("h3",{id:"deletetargetbyname"},"DeleteTargetByName"),(0,r.kt)("p",null,"Remove an interact target by its previously defined name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},"exports.px_hud:DeleteTargetByName(targetName --[[string]]);\n-- targetName: name of target zone, must be unique\n")),(0,r.kt)("h3",{id:"toggletarget"},"ToggleTarget"),(0,r.kt)("p",null,'Forcefully toggle "targetting mode". This is the equivelant of holding down ',(0,r.kt)("inlineCode",{parentName:"p"},"LALT"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},"exports.px_hud:ToggleTarget(targetOn --[[bool]]);\n-- targetOn: true to show targetting mode, false to hide\n")),(0,r.kt)("h3",{id:"doestargetexist"},"DoesTargetExist"),(0,r.kt)("p",null,"Returns whether a target zone already exists."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="client/main.lua"',title:'"client/main.lua"'},"local exists --[[bool]] = exports.px_hud:DoesTargetExist(targetName --[[string]]);\n-- targetName: name of target zone, must be unique\n")))}p.isMDXComponent=!0}}]);